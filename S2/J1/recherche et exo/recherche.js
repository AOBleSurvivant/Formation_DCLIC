/** ‚úÖ M√©thodes les plus utilis√©es de String en JavaScript
 * 
 * üîπ Informations sur la cha√Æne
 * 
 * | M√©thode             | Description               | Exemple                  |
| ------------------- | ------------------------- | ------------------------ |
| `length`            | Donne la longueur         | `"chat".length ‚Üí 4`      |
| `charAt(index)`     | Caract√®re √† l‚Äôindex donn√© | `"chat".charAt(1) ‚Üí "h"` |
| `charCodeAt(index)` | Code Unicode du caract√®re | `"A".charCodeAt(0) ‚Üí 65` |
| `[index]`           | Acc√®s direct              | `"chat"[2] ‚Üí "a"`        |


üîπ Rechercher / Tester du texte

| M√©thode            | Description                            | Exemple                              |
| ------------------ | -------------------------------------- | ------------------------------------ |
| `indexOf(val)`     | Position de la **1√®re** occurrence     | `"bonjour".indexOf("o") ‚Üí 1`         |
| `lastIndexOf(val)` | Position de la **derni√®re** occurrence | `"bonjour".lastIndexOf("o") ‚Üí 5`     |
| `includes(val)`    | Contient cette valeur ? (true/false)   | `"bonjour".includes("jour") ‚Üí true`  |
| `startsWith(val)`  | Commence par ?                         | `"bonjour".startsWith("bon") ‚Üí true` |
| `endsWith(val)`    | Finit par ?                            | `"bonjour".endsWith("jour") ‚Üí true`  |


üîπ Extraire une sous-cha√Æne

| M√©thode                 | Description                                  | Exemple                             |
| ----------------------- | -------------------------------------------- | ----------------------------------- |
| `slice(start, end)`     | Extrait selon index (supporte index n√©gatif) | `"bonjour".slice(0, 3) ‚Üí "bon"`     |
| `substring(start, end)` | Idem, mais **sans index n√©gatif**            | `"bonjour".substring(0, 3) ‚Üí "bon"` |
| `substr(start, length)` | Extrait selon **longueur** *(ancienne)*      | `"bonjour".substr(0, 3) ‚Üí "bon"`    |


üîπ Modifier une cha√Æne

| M√©thode                       | Description                         | Exemple                                             |
| ----------------------------- | ----------------------------------- | --------------------------------------------------- |
| `toUpperCase()`               | Met en majuscules                   | `"chat".toUpperCase() ‚Üí "CHAT"`                     |
| `toLowerCase()`               | Met en minuscules                   | `"CHAT".toLowerCase() ‚Üí "chat"`                     |
| `trim()`                      | Supprime les espaces autour         | `"  bonjour  ".trim() ‚Üí "bonjour"`                  |
| `trimStart()` / `trimEnd()`   | Supprime d√©but ou fin               | `"  bonjour".trimStart() ‚Üí "bonjour"`               |
| `replace(ancien, nouveau)`    | Remplace la **1re** occurrence      | `"jour nuit".replace("jour", "soir") ‚Üí "soir nuit"` |
| `replaceAll(ancien, nouveau)` | Remplace **toutes** les occurrences | `"le le le".replaceAll("le", "la") ‚Üí "la la la"`    |


üîπ Couper / Diviser / Fusionner

| M√©thode             | Description               | Exemple                              |
| ------------------- | ------------------------- | ------------------------------------ |
| `split(s√©parateur)` | Coupe en tableau          | `"a,b,c".split(",") ‚Üí ["a","b","c"]` |
| `concat(val)`       | Concat√®ne des cha√Ænes     | `"bon".concat("jour") ‚Üí "bonjour"`   |
| `repeat(n)`         | R√©p√®te la cha√Æne `n` fois | `"ha".repeat(3) ‚Üí "hahaha"`          |


üîπ Recherche avanc√©e avec regex

| M√©thode                | Description                                       | Exemple                                 |
| ---------------------- | ------------------------------------------------- | --------------------------------------- |
| `match(regexp)`        | Cherche des correspondances (retourne un tableau) | `"abc123".match(/\d+/) ‚Üí ["123"]`       |
| `matchAll(regexp)`     | Toutes les correspondances (ES2020)               | `for (let m of "a1b2".matchAll(/\d/g))` |
| `search(regexp)`       | Retourne l‚Äôindex de la correspondance             | `"abc123".search(/\d/) ‚Üí 3`             |
| `replace(regexp, val)` | Remplace avec une expression r√©guli√®re            | `"abc123".replace(/\d+/, "#") ‚Üí "abc#"` |


üìå Astuce : cha√Ænes sont immutables
Chaque m√©thode retourne une nouvelle cha√Æne. La cha√Æne d‚Äôorigine n‚Äôest jamais modifi√©e.

‚úÖ Bonus : Cas d‚Äôusage combin√©
let phrase = "  JavaScript est g√©nial!  ";

let propre = phrase.trim().toLowerCase().replace("g√©nial", "puissant");
console.log(propre); // "javascript est puissant!"

__________________________________üèÜ TOP 10 des m√©thodes String les plus utilis√©es_____________________________
let nom = "  Jean Dupont  ";

// 1. Nettoyage
let propre = nom.trim(); // "Jean Dupont"

// 2. Recherche
propre.includes("Dupont"); // true

// 3. Comparaison sans casse
let role = "admin";
if (role.toLowerCase() === "admin") {
  console.log("Acc√®s autoris√©");
}

// 4. Remplacement
let phrase = "JS est nul";
phrase = phrase.replace("nul", "g√©nial"); // "JS est g√©nial"

// 5. Extraction
let sousPhrase = phrase.slice(0, 7); // "JS est "


 ____________Exemples concrets

 let nom = "  Jean Dupont  ";

// 1. Nettoyage
let propre = nom.trim(); // "Jean Dupont"

// 2. Recherche
propre.includes("Dupont"); // true

// 3. Comparaison sans casse
let role = "admin";
if (role.toLowerCase() === "admin") {
  console.log("Acc√®s autoris√©");
}

// 4. Remplacement
let phrase = "JS est nul";
phrase = phrase.replace("nul", "g√©nial"); // "JS est g√©nial"

// 5. Extraction
let sousPhrase = phrase.slice(0, 7); // "JS est "




****______________________________LES METHODES DE MANUPILATION DES NUMBERS, Tableaux, Objets.

‚úÖ Les 10 m√©thodes les plus utilis√©es avec Number et Math

| M√©thode         | Description rapide                       | Exemple                            |
| --------------- | ---------------------------------------- | ---------------------------------- |
| `parseInt()`    | Convertit une cha√Æne en entier           | `parseInt("15.5")` ‚Üí `15`          |
| `parseFloat()`  | Convertit une cha√Æne en nombre √† virgule | `parseFloat("15.5")` ‚Üí `15.5`      |
| `Number()`      | Convertit en nombre                      | `Number("42")` ‚Üí `42`              |
| `toFixed(n)`    | Arrondit avec `n` d√©cimales (cha√Æne)     | `(3.14159).toFixed(2)` ‚Üí `"3.14"`  |
| `Math.round()`  | Arrondi √† l‚Äôentier le plus proche        | `Math.round(4.6)` ‚Üí `5`            |
| `Math.floor()`  | Arrondi vers le bas                      | `Math.floor(4.9)` ‚Üí `4`            |
| `Math.ceil()`   | Arrondi vers le haut                     | `Math.ceil(4.1)` ‚Üí `5`             |
| `Math.random()` | Nombre al√©atoire entre 0 et 1            | `Math.random()` ‚Üí `0.73` (exemple) |
| `Math.max()`    | Renvoie la plus grande valeur            | `Math.max(1, 5, 10)` ‚Üí `10`        |
| `Math.min()`    | Renvoie la plus petite valeur            | `Math.min(1, 5, 10)` ‚Üí `1`         |


// ____________________‚úÖ Exercices pratiques - Manipulation des nombres en JavaScript

// üåü Exercice 1 : Conversion de types
let chaine1 = "25.75";
let chaine2 = "100px";

let entier1 = parseInt(chaine1);       // 25
let flottant1 = parseFloat(chaine1);   // 25.75
let entier2 = parseInt(chaine2);       // 100

console.log("Ex1 - Entier 1 :", entier1);
console.log("Ex1 - Flottant 1 :", flottant1);
console.log("Ex1 - Entier 2 :", entier2);

// üåü Exercice 2 : Arrondir un nombre
let nombre = 7.567;

let arrondi = Math.round(nombre);      // 8
let arrondiBas = Math.floor(nombre);   // 7
let arrondiHaut = Math.ceil(nombre);   // 8
let deuxDecimales = nombre.toFixed(2); // "7.57"

console.log("Ex2 - Arrondi :", arrondi);
console.log("Ex2 - Bas :", arrondiBas);
console.log("Ex2 - Haut :", arrondiHaut);
console.log("Ex2 - Deux d√©cimales :", deuxDecimales);

// üåü Exercice 3 : Nombres al√©atoires
let aleatoire1 = Math.random(); // 0 √† 1
let aleatoire2 = Math.floor(Math.random() * 10) + 1; // 1 √† 10
let aleatoire3 = Math.floor(Math.random() * (100 - 50 + 1)) + 50; // 50 √† 100

console.log("Ex3 - Al√©atoire 0-1 :", aleatoire1);
console.log("Ex3 - Al√©atoire 1-10 :", aleatoire2);
console.log("Ex3 - Al√©atoire 50-100 :", aleatoire3);

// üåü Exercice 4 : Max et Min
let a = 15, b = 9, c = 22, d = 3;

let max = Math.max(a, b, c, d); // 22
let min = Math.min(a, b, c, d); // 3

console.log("Ex4 - Max :", max);
console.log("Ex4 - Min :", min);

// üåü Exercice 5 : Puissance et racine
let puissance = Math.pow(5, 3);    // 125
let racine = Math.sqrt(144);      // 12

console.log("Ex5 - 5^3 :", puissance);
console.log("Ex5 - ‚àö144 :", racine);

// üåü Exercice 6 : Test de validit√©
let val1 = "abc";
let val2 = "45";
let val3 = NaN;

console.log("Ex6 - val1 est NaN :", isNaN(val1)); // true
console.log("Ex6 - val2 est NaN :", isNaN(val2)); // false
console.log("Ex6 - val3 est NaN :", isNaN(val3)); // true

// üåü Exercice 7 : Formatage
let prix = 89.989;

let prixFormate = prix.toFixed(2) + " FG";      // "89.99 FG"
let prixBinaire = prix.toString(2);             // base 2 (binaire)

console.log("Ex7 - Prix format√© :", prixFormate);
console.log("Ex7 - Binaire :", prixBinaire);

_______________________‚úÖ Correction des exercices pratiques

// üåü Exercice 1 : Conversion de types
let chaine1 = "25.75";
let chaine2 = "100px";

let entier1 = parseInt(chaine1);       // 25
let flottant1 = parseFloat(chaine1);   // 25.75
let entier2 = parseInt(chaine2);       // 100

console.log("Ex1 - Entier 1 :", entier1);
console.log("Ex1 - Flottant 1 :", flottant1);
console.log("Ex1 - Entier 2 :", entier2);

// üåü Exercice 2 : Arrondir un nombre
let nombre = 7.567;

let arrondi = Math.round(nombre);      // 8
let arrondiBas = Math.floor(nombre);   // 7
let arrondiHaut = Math.ceil(nombre);   // 8
let deuxDecimales = nombre.toFixed(2); // "7.57"

console.log("Ex2 - Arrondi :", arrondi);
console.log("Ex2 - Bas :", arrondiBas);
console.log("Ex2 - Haut :", arrondiHaut);
console.log("Ex2 - Deux d√©cimales :", deuxDecimales);

// üåü Exercice 3 : Nombres al√©atoires
let aleatoire1 = Math.random(); // 0 √† 1
let aleatoire2 = Math.floor(Math.random() * 10) + 1; // 1 √† 10
let aleatoire3 = Math.floor(Math.random() * (100 - 50 + 1)) + 50; // 50 √† 100

console.log("Ex3 - Al√©atoire 0-1 :", aleatoire1);
console.log("Ex3 - Al√©atoire 1-10 :", aleatoire2);
console.log("Ex3 - Al√©atoire 50-100 :", aleatoire3);

// üåü Exercice 4 : Max et Min
let a = 15, b = 9, c = 22, d = 3;

let max = Math.max(a, b, c, d); // 22
let min = Math.min(a, b, c, d); // 3

console.log("Ex4 - Max :", max);
console.log("Ex4 - Min :", min);

// üåü Exercice 5 : Puissance et racine
let puissance = Math.pow(5, 3);    // 125
let racine = Math.sqrt(144);      // 12

console.log("Ex5 - 5^3 :", puissance);
console.log("Ex5 - ‚àö144 :", racine);

// üåü Exercice 6 : Test de validit√©
let val1 = "abc";
let val2 = "45";
let val3 = NaN;

console.log("Ex6 - val1 est NaN :", isNaN(val1)); // true
console.log("Ex6 - val2 est NaN :", isNaN(val2)); // false
console.log("Ex6 - val3 est NaN :", isNaN(val3)); // true

// üåü Exercice 7 : Formatage
let prix = 89.989;

let prixFormate = prix.toFixed(2) + " FG";      // "89.99 FG"
let prixBinaire = prix.toString(2);             // base 2 (binaire)

console.log("Ex7 - Prix format√© :", prixFormate);
console.log("Ex7 - Binaire :", prixBinaire);
________________________________________________________________
// 
// ===============================
// ‚úÖ M√âTHODES DE MANIPULATION DES TABLEAUX EN JAVASCRIPT
// ===============================

// === üîÅ BOUCLER ET TRANSFORMER ===

// üåü forEach() ‚Üí Ex√©cute une fonction pour chaque √©l√©ment (sans retourner de nouveau tableau)
let fruits = ["pomme", "banane", "mangue"];
fruits.forEach(fruit => console.log("forEach:", fruit));

// üåü map() ‚Üí Transforme chaque √©l√©ment et retourne un **nouveau tableau**
let nombres = [1, 2, 3];
let doubles = nombres.map(n => n * 2); // [2, 4, 6]
console.log("map:", doubles);

// üåü filter() ‚Üí Retourne un nouveau tableau contenant **les √©l√©ments qui passent un test**
let ages = [12, 18, 25, 30];
let majeurs = ages.filter(age => age >= 18); // [18, 25, 30]
console.log("filter:", majeurs);

// üåü reduce() ‚Üí R√©duit le tableau √† une seule valeur (ex. somme)
let chiffres = [1, 2, 3, 4];
let somme = chiffres.reduce((acc, val) => acc + val, 0); // 10
console.log("reduce:", somme);

// üåü flatMap() ‚Üí Comme map() suivi de flat(1), pour transformer et aplatir
let phrases = ["salut", "bon"];
let lettres = phrases.flatMap(p => p.split(""));
console.log("flatMap:", lettres); // ["s", "a", "l", "u", "t", "b", "o", "n"]

// === üîç RECHERCHER / TESTER ===

// üåü find() ‚Üí Retourne le **premier √©l√©ment** qui passe un test (ou `undefined`)
let noms = ["Ali", "Bob", "Charlie"];
let trouv√© = noms.find(n => n.startsWith("C")); // "Charlie"
console.log("find:", trouv√©);

// üåü findIndex() ‚Üí Retourne l‚Äôindex du premier √©l√©ment qui passe un test
let index = noms.findIndex(n => n.startsWith("B"));
console.log("findIndex:", index); // 1

// üåü some() ‚Üí V√©rifie si **au moins un** √©l√©ment passe le test
// üåü every() ‚Üí V√©rifie si **tous** les √©l√©ments passent le test
let notes = [12, 15, 9];
console.log("some:", notes.some(n => n < 10));    // true
console.log("every:", notes.every(n => n >= 10)); // false

// üåü includes() ‚Üí V√©rifie si une valeur existe dans le tableau
console.log("includes:", noms.includes("Bob")); // true

// üåü indexOf() ‚Üí Retourne l‚Äôindex de la premi√®re occurrence
// üåü lastIndexOf() ‚Üí Retourne l‚Äôindex de la derni√®re occurrence
let valeurs = [10, 20, 30, 20];
console.log("indexOf:", valeurs.indexOf(20));        // 1
console.log("lastIndexOf:", valeurs.lastIndexOf(20)); // 3

// === ‚úÇÔ∏è EXTRAIRE OU COUPER DES √âL√âMENTS ===

// üåü slice() ‚Üí Extrait une portion du tableau sans modifier l‚Äôoriginal
let animaux = ["chat", "chien", "lapin"];
let copie = animaux.slice(1, 3); // ["chien", "lapin"]
console.log("slice:", copie);

// üåü splice() ‚Üí Modifie le tableau : supprime/remplace/ajoute des √©l√©ments
let couleurs = ["rouge", "vert", "bleu"];
couleurs.splice(1, 1, "jaune"); // enl√®ve "vert", ajoute "jaune"
console.log("splice:", couleurs); // ["rouge", "jaune", "bleu"]

// üåü flat() ‚Üí Aplati un tableau de tableaux en un seul niveau (ou plus)
let imbrique = [1, [2, [3, 4]]];
console.log("flat(1):", imbrique.flat(1)); // [1, 2, [3, 4]]
console.log("flat(2):", imbrique.flat(2)); // [1, 2, 3, 4]

// === üîß MODIFICATION DU TABLEAU ===

// üåü push() ‚Üí Ajoute √† la fin | üåü pop() ‚Üí Retire le dernier
let stack = [1, 2];
stack.push(3);  // [1, 2, 3]
stack.pop();    // [1, 2]
console.log("push/pop:", stack);

// üåü unshift() ‚Üí Ajoute au d√©but | üåü shift() ‚Üí Retire le premier
let file = [2, 3];
file.unshift(1); // [1, 2, 3]
file.shift();    // [2, 3]
console.log("unshift/shift:", file);

// üåü sort() ‚Üí Trie les √©l√©ments (par d√©faut en string, utiliser une fonction pour nombres)
let scores = [10, 5, 20];
scores.sort((a, b) => a - b); // tri croissant
console.log("sort:", scores);

// üåü reverse() ‚Üí Inverse l'ordre des √©l√©ments dans le tableau
let lettres2 = ["a", "b", "c"];
lettres2.reverse(); // ["c", "b", "a"]
console.log("reverse:", lettres2);

// üåü fill() ‚Üí Remplit le tableau avec une valeur donn√©e
let rempli = new Array(4).fill("JS");
console.log("fill:", rempli); // ["JS", "JS", "JS", "JS"]

// === üì¶ AUTRES M√âTHODES UTILES ===

// üåü join() ‚Üí Concat√®ne les √©l√©ments du tableau en une cha√Æne
let mots = ["Hello", "World"];
console.log("join:", mots.join(" ")); // "Hello World"

// üåü toString() ‚Üí Convertit le tableau en cha√Æne (s√©par√©e par des virgules)
let chiffres2 = [1, 2, 3];
console.log("toString:", chiffres2.toString()); // "1,2,3"

// üåü concat() ‚Üí Fusionne deux tableaux (sans modifier les originaux)
let a = [1, 2], b = [3, 4];
let fusion = a.concat(b);
console.log("concat:", fusion); // [1, 2, 3, 4]

// üåü Array.isArray() ‚Üí V√©rifie si une valeur est un tableau
console.log("isArray (tableau):", Array.isArray([1, 2])); // true
console.log("isArray (string):", Array.isArray("texte")); // false

// 
________________________________________________________
// 


// ===============================
// ‚úÖ M√âTHODES DE MANIPULATION DES OBJETS EN JAVASCRIPT
// ===============================

let personne = {
  nom: "Ali",
  age: 30,
  profession: "D√©veloppeur"
};

// üåü Object.keys() ‚Üí Retourne un tableau contenant les cl√©s (propri√©t√©s) de l'objet
console.log("Object.keys:", Object.keys(personne)); 
// ["nom", "age", "profession"]

// üåü Object.values() ‚Üí Retourne un tableau contenant les valeurs de l'objet
console.log("Object.values:", Object.values(personne)); 
// ["Ali", 30, "D√©veloppeur"]

// üåü Object.entries() ‚Üí Retourne un tableau de paires [cl√©, valeur]
console.log("Object.entries:", Object.entries(personne)); 
// [["nom", "Ali"], ["age", 30], ["profession", "D√©veloppeur"]]

// üåü hasOwnProperty() ‚Üí V√©rifie si l'objet poss√®de une propri√©t√© sp√©cifique
console.log("hasOwnProperty nom:", personne.hasOwnProperty("nom")); // true
console.log("hasOwnProperty adresse:", personne.hasOwnProperty("adresse")); // false

// üåü Acc√®s aux propri√©t√©s ‚Üí On peut lire ou modifier une valeur via la notation point ou crochet
console.log("Nom:", personne.nom); // Ali
personne.age = 31;
console.log("√Çge mis √† jour:", personne.age); // 31

// üåü Ajout de propri√©t√© ‚Üí On ajoute une nouvelle propri√©t√© simplement
personne.adresse = "Conakry";
console.log("Adresse ajout√©e:", personne); 
// { nom: "Ali", age: 31, profession: "D√©veloppeur", adresse: "Conakry" }

// üåü Suppression de propri√©t√© ‚Üí Utilisation du mot-cl√© `delete`
delete personne.profession;
console.log("Apr√®s suppression:", personne); 
// { nom: "Ali", age: 31, adresse: "Conakry" }

// üåü Boucle for...in ‚Üí Permet d‚Äôit√©rer sur toutes les cl√©s d‚Äôun objet
for (let cl√© in personne) {
  console.log(`for...in -> ${cl√©} : ${personne[cl√©]}`);
}
// Affiche toutes les paires cl√©/valeur de l'objet

// === AUTRES M√âTHODES UTILES POUR LES OBJETS ===

// üåü Object.assign() ‚Üí Copie les propri√©t√©s d'un ou plusieurs objets vers un autre
let cible = {};
let source = { pays: "Guin√©e", ville: "Conakry" };
Object.assign(cible, personne, source);
console.log("Object.assign:", cible); 
// fusionne les objets

// üåü Object.freeze() ‚Üí Rend un objet **immuable** (on ne peut plus le modifier)
let frozen = Object.freeze({ nom: "Alpha", age: 25 });
frozen.age = 30;
console.log("Object.freeze (√¢ge non modifi√©):", frozen); // age reste 25

// üåü Object.seal() ‚Üí Emp√™che l'ajout ou la suppression de propri√©t√©s (mais les valeurs peuvent √™tre modifi√©es)
let scell√© = Object.seal({ nom: "Barry", age: 28 });
scell√©.age = 29; // modifiable
delete scell√©.nom; // non supprimable
scell√©.ville = "Kindia"; // non ajoutable
console.log("Object.seal:", scell√©); // { nom: "Barry", age: 29 }

// üåü JSON.stringify() ‚Üí Convertit un objet en cha√Æne JSON
let chaine = JSON.stringify(personne);
console.log("JSON.stringify:", chaine);

// üåü JSON.parse() ‚Üí Convertit une cha√Æne JSON en objet JavaScript
let objetReconstitu√© = JSON.parse(chaine);
console.log("JSON.parse:", objetReconstitu√©);

// üåü Destructuration d'objet ‚Üí Extraire des propri√©t√©s dans des variables
let { nom, age } = personne;
console.log("Destructuration:", nom, age);

// üåü V√©rification d‚Äôexistence avec "in"
console.log("nom" in personne); // true
console.log("email" in personne); // false





*/
